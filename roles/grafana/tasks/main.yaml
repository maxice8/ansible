---
- name: Create docker-compose directory for grafana
  ansible.builtin.file:
    owner: root
    group: root
    mode: '0755'
    state: directory
    path: /srv/grafana

- name: Copy docker-compose files to /srv/grafana
  ansible.builtin.copy:
    owner: root
    group: root
    mode: '0644'
    dest: /srv/grafana/
    src: docker-compose.yml

- name: Get list of managed provisioning files
  ansible.builtin.find:
    path: roles/grafana/files/provisioning
    recurse: true
  register: managed
  delegate_to: localhost

- name: Set managed_files to list of managed provisioning files
  ansible.builtin.set_fact:
    managed_files: "{{ managed.files | map(attribute='path') | map('regex_replace', '^.*/provisioning/', '') | sort | list }}"
  delegate_to: localhost

- name: Get list of installed provisioning files
  ansible.builtin.find:
    path: /srv/grafana/provisioning
    recurse: true
  register: remote_files

- name: Set remote_files to list of provisioning files in remote
  ansible.builtin.set_fact:
    remote_files: "{{ remote_files.files | map(attribute='path') | map('regex_replace', '^.*/provisioning/', '') | sort | list }}"

- name: Remove provisioning files in Remote that are not Managed
  ansible.builtin.file:
    path: /srv/grafana/provisioning/{{ provisioning_file }}
    state: absent
  loop: "{{ remote_files | difference(managed_files) }}"
  loop_control:
    loop_var: provisioning_file

- name: Copy Grafana provisioning directory to /srv/grafana
  ansible.builtin.copy:
    owner: root
    group: root
    mode: '0644'
    dest: /srv/grafana/
    src: provisioning/
  notify: Restart Grafana

- name: Enable grafana docker
  community.docker.docker_compose_v2:
    project_src: /srv/grafana
    wait: true
    wait_timeout: 90

- name: Expose grafana over tailscale
  ansible.builtin.command: tailscale serve --bg --https=3000 33000
  register: tailscale_serve_output
  failed_when: tailscale_serve_output.rc != 0
  changed_when: true
  # Here we access Web.<hostname>.<tailnet_name>.ts.net:<tailscale-port>.Handlers./.Proxy
  # and check if matches http://127.0.0.1:<service-port>
  when: >
    tailscale_active and
    tailscale_serve_status.Web.get(
      ansible_facts['hostname'] ~ '.' ~ tailnet_name ~ '.ts.net:3000',
      {}
    ).get(
      'Handlers',
      {}
    ).get(
      '/',
      {}
    ).get('Proxy', '') != 'http://127.0.0.1:33000'
